import{o as n,c as s,a}from"./app.2847925b.js";const t='{"title":"数据类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"数据类型","slug":"数据类型"},{"level":2,"title":"整型","slug":"整型"},{"level":2,"title":"特殊整型","slug":"特殊整型"},{"level":2,"title":"数字语法","slug":"数字语法"},{"level":2,"title":"浮点型","slug":"浮点型"},{"level":2,"title":"复数","slug":"复数"},{"level":2,"title":"布尔值","slug":"布尔值"},{"level":2,"title":"字符串","slug":"字符串"},{"level":2,"title":"字符串转义符","slug":"字符串转义符"},{"level":2,"title":"byte和rune类型","slug":"byte和rune类型"},{"level":2,"title":"类型转换","slug":"类型转换"}],"relativePath":"go/basics/datatype.md","lastUpdated":1632224931667}',e={},p=[a('<h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h2><blockquote><p>Go语言中有丰富的数据类型，除了基本的整型、浮点型、布尔型、字符串外，还有数组、切片、结构体、函数、map、通道（channel）等。Go 语言的基本类型和其他语言大同小异。</p></blockquote><h2 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">整型分为以下两个大类</p><ul><li>按长度分为：int8、int16、int32、int64</li><li>对应的无符号整型：uint8、uint16、uint32、uint64</li></ul><p>其中</p><blockquote><p>uint8就是我们熟知的byte型</p><p>int16对应C语言中的short型</p><p>int64对应C语言中的long型</p></blockquote></div><table><thead><tr><th>类型</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td>uint8</td><td style="text-align:center;">无符号 8位整型 (0 到 255)</td></tr><tr><td>uint16</td><td style="text-align:center;">无符号 16位整型 (0 到 65535)</td></tr><tr><td>uint32</td><td style="text-align:center;">无符号 32位整型 (0 到 4294967295)</td></tr><tr><td>uint64</td><td style="text-align:center;">无符号 64位整型 (0 到 18446744073709551615)</td></tr><tr><td>int8</td><td style="text-align:center;">有符号 8位整型 (-128 到 127)</td></tr><tr><td>int16</td><td style="text-align:center;">有符号 16位整型 (-32768 到 32767)</td></tr><tr><td>int32</td><td style="text-align:center;">有符号 32位整型 (-2147483648 到 2147483647)</td></tr><tr><td>int64</td><td style="text-align:center;">有符号 64位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><h2 id="特殊整型" tabindex="-1">特殊整型 <a class="header-anchor" href="#特殊整型" aria-hidden="true">#</a></h2><table><thead><tr><th>类型</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td>uint</td><td style="text-align:center;">32位操作系统上就是uint32，64位操作系统上就是uint64</td></tr><tr><td>int</td><td style="text-align:center;">32位操作系统上就是int32，64位操作系统上就是int64</td></tr><tr><td>uintptr</td><td style="text-align:center;">无符号整型，用于存放一个指针</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">警告</p><ul><li>注意</li></ul><blockquote><p>在使用int和 uint类型时，不能假定它是32位或64位的整型，而是考虑int和uint可能在不同平台上的差异。</p></blockquote><ul><li>注意事项</li></ul><blockquote><p>获取对象的长度的内建len()函数返回的长度可以根据不同平台的字节长度进行变化。实际使用中，切片或 map 的元素数量等都可以用int来表示。在涉及到二进制传输、读写文件的结构描述时，为了保持文件的结构不会受到不同编译目标平台字节长度的影响，不要使用int和 uint。</p></blockquote></div><h2 id="数字语法" tabindex="-1">数字语法 <a class="header-anchor" href="#数字语法" aria-hidden="true">#</a></h2><p>Go1.13版本之后引入了数字字面量语法，这样便于开发者以二进制、八进制或十六进制浮点数的格式定义数字。</p><p><strong>例如：</strong></p><ul><li>v := 0b00101101</li></ul><blockquote><p>代表二进制的 101101，相当于十进制的 45。</p></blockquote><ul><li>v := 0o377</li></ul><blockquote><p>代表八进制的 377，相当于十进制的 255。</p></blockquote><ul><li>v := 0x1p-2</li></ul><blockquote><p>代表十六进制的 1 除以 2²，也就是 0.25。</p></blockquote><p>而且还允许我们用 _ 来分隔数字，比如说：</p><ul><li>v := 123_456</li></ul><blockquote><p>表示 v 的值等于 123456。</p></blockquote><div class="language-go line-numbers-mode"><pre><code>我们可以借助fmt函数来将一个整数以不同进制形式展示。\n<span class="token keyword">package</span> main\n \n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n \n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token comment">// 十进制</span>\n\t<span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token comment">// 10</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%b \\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token comment">// 1010  占位符%b表示二进制</span>\n \n\t<span class="token comment">// 八进制  以0开头</span>\n\t<span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">077</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%o \\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment">// 77</span>\n \n\t<span class="token comment">// 十六进制  以0x开头</span>\n\t<span class="token keyword">var</span> c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0xff</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%x \\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>  <span class="token comment">// ff</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%X \\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>  <span class="token comment">// FF</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="浮点型" tabindex="-1">浮点型 <a class="header-anchor" href="#浮点型" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">Go语言支持两种浮点型数</p><p>这两种浮点型数据格式遵循IEEE 754标准</p><ul><li>float32</li></ul><blockquote><p>float32 的浮点数的最大范围约为 3.4e38，可以使用常量定义：math.MaxFloat32。</p></blockquote><ul><li>float64</li></ul><blockquote><p>float64 的浮点数的最大范围约为 1.8e308，可以使用一个常量定义：math.MaxFloat64。</p></blockquote></div><p>打印浮点数时，可以使用fmt包配合动词%f，代码如下：</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">package</span> main\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n        <span class="token string">&quot;fmt&quot;</span>\n        <span class="token string">&quot;math&quot;</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>Pi<span class="token punctuation">)</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2f\\n&quot;</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>Pi<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="复数" tabindex="-1">复数 <a class="header-anchor" href="#复数" aria-hidden="true">#</a></h2><ul><li>complex64</li><li>complex128</li></ul><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">var</span> c1 <span class="token builtin">complex64</span>\nc1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2i</span>\n<span class="token keyword">var</span> c2 <span class="token builtin">complex128</span>\nc2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3i</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="布尔值" tabindex="-1">布尔值 <a class="header-anchor" href="#布尔值" aria-hidden="true">#</a></h2><p>Go语言中以bool类型进行声明布尔型数据，布尔型数据只有<code>true</code>（真）和<code>false</code>（假）两个值。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><ul><li>布尔类型变量的默认值为false。</li><li>Go 语言中不允许将整型强制转换为布尔型.</li><li>布尔型无法参与数值运算，也无法与其他类型进行转换。</li></ul></div><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-hidden="true">#</a></h2><p>Go语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样。</p><p>Go 语言里的字符串的内部实现使用<code>UTF-8</code>编码。 字符串的值为<code>双引号(&quot;)</code>中的内容，可以在Go语言的源码中直接添加非ASCII码字符，例如：</p><div class="language-go line-numbers-mode"><pre><code>s1 <span class="token operator">:=</span> <span class="token string">&quot;hello&quot;</span>\ns2 <span class="token operator">:=</span> <span class="token string">&quot;你好&quot;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="字符串转义符" tabindex="-1">字符串转义符 <a class="header-anchor" href="#字符串转义符" aria-hidden="true">#</a></h2><p>Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p><h2 id="byte和rune类型" tabindex="-1">byte和rune类型 <a class="header-anchor" href="#byte和rune类型" aria-hidden="true">#</a></h2><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-hidden="true">#</a></h2>',39)];e.render=function(a,t,e,l,o,c){return n(),s("div",null,p)};export{t as __pageData,e as default};
